#!/usr/bin/env node
/* vim: set syntax=javascript ft=javascript : */
const Promise = require('bluebird'),
      request = require('request-promise'),
      flatten = require('flat'),
      fs = require('fs'),
      chalk = require('chalk'),
      {generateBlockLogger, verbose} = require('../lib/logging'),
      generateRandomSetId = require('../lib/generateRandomSetId'),
      getTracksInMix = require('../lib/getTracksInMix');

chalk.enabled = true;

function getMixesOfInterest(tags, page=1) {
  return request({
    method: 'GET',
    url: `https://8tracks.com/explore/${tags.join('+')}/hot/${page}?include=pagination%2Cmixes&format=jsonh`,
  }).then(body => {
    const data = JSON.parse(body).mix_set.mixes;
    return data.map(mix => mix.id);
  });
}

// Use this script interactively:
if (require.main === module) {
  const argv = require('minimist')(process.argv.slice(2));

  const log = generateBlockLogger();

  // Use the specified set id, or generate a random set id from 100k-400k
  const set = generateRandomSetId();

  const artist = argv.artist ? new RegExp(argv.artist, 'i') : null;
  const album = argv.album ? new RegExp(argv.album, 'i') : null;
  const name = argv.name ? new RegExp(argv.name, 'i') : null;

  if ((!artist && !album) || argv.help) {
    verbose(`Usage: ./8tracks-find-artist [--artist foo] [--album bar] [--delay]\n`);
    verbose(`--artist specifies a given artist to search for. It's a case insensitive regex.\n`);
    verbose(`--album specifies a given album to search for. It's a case insensitive regex.\n`);
    verbose(`--delay specifies whether to wait the length of each track after the track is
        fetched as if it was "playing". For longer playlists, 8tracks can't handle fetching all
        songs at once, so this is a way around that. Unfortunately, this means that fetching a
        playlist with this flag takes as long as it takes for the playlist to play to its end :(\n`);
    verbose(`--pages specifies how many pages of mixes to searhc through. By default, it's 10.\n`);
    verbose(`--output (or -o) specifies where to put the output. If a filepath, put data in that file. If empty, write to stdout.\n\n`);
    verbose(`Error: please specify a mix id to fetch with --mix (it's a required argument)\n`);
    process.exit(1);
  }

  const tags = [argv.artist, argv.album].filter(i => i);

  verbose('* Searching for all mixes with tags', chalk.green(tags.join(', ')), '\n');

  // Get mixes across a range of pages.
  const mixPages = [];
  for (let i = 0; i < (argv.pages || 10); i++) {
    mixPages.push(getMixesOfInterest(tags, i));
  }

  return Promise.all(mixPages).then(mixesOnEachPage => {
    const mixes = mixesOnEachPage.reduce((acc, i) => [...acc, ...i], []);
    verbose(`* Received ${chalk.green(mixes.length)} mixes!\n`);

    // Log playlist info block
    log({
      name: 'Find Artist Playlist',
      // TODO: any more here?
    }, 'playlist');
    verbose(`* Write playlist info block...\n`);

    const tracksThatMatch = [];
    const all = mixes.map(mixId => {
      verbose(`* Fetching mix info for mix id ${chalk.green(mixId)}...\n`);

      // For each mix, get all tracks within.
      const setId = generateRandomSetId();
      const {emitter, complete} = getTracksInMix(mixId, setId, {delayLengthOfTrack: argv.delay || false});

      // For each track that is received...
      emitter.on('track', track => {
        verbose(`* Found track in mix ${chalk.green(mixId)}: ${chalk.cyan(track.name)}`);

        if (
          // Make sure the track matches all the filters that were specified
          (!artist || track.artist_details.name.match(artist)) &&
          (!album || track.release_name.match(album)) &&
          (!name || track.name.match(name)) &&

          // Only add new unique tracks
          // FIXME: not working!
          (tracksThatMatch.find(i => i.name.trim(' ') === track.name.trim(' ')) === undefined)
        ) {
          process.stderr.write(chalk.red(' ... Added.'));
          log(track, 'track');
        }

        process.stderr.write('\n');
      });

      // FIXME: this is a bad idea maybe?
      return complete.catch(e => null);
    });

    return Promise.all(all).catch(err => console.error(err));
  });
}
