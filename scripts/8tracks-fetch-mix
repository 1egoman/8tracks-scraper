#!/usr/bin/env node
/* vim: set syntax=javascript ft=javascript : */
const Promise = require('bluebird'),
      request = require('request-promise'),
      fs = require('fs'),
      chalk = require('chalk'),
      {generateBlockLogger, verbose} = require('../lib/logging'),
      generateRandomSetId = require('../lib/generateRandomSetId'),
      getTracksInMix = require('../lib/getTracksInMix'),
      {fetchTrack, getLengthOfTrack, playMix, convertMixUrlToMixId} = require('../lib/api');


// Use this script interactively:
if (require.main === module) {
  const argv = require('minimist')(process.argv.slice(2));
  let mix = argv.mix || argv.m;
  let delay = argv.delay || argv.d;

  const logBlock = generateBlockLogger();

  // Use the specified set id, or generate a random set id from 100k-400k
  let set = argv.set || argv.s || generateRandomSetId();

  if (!mix) {
    verbose(`Usage: ./8tracks-fetch-mix --mix "mix" [--set "set id"] [--output "filename"]\n`);
    verbose(`--mix specifies the mix url (or raw mix id) to fetch from 8tracks\n`);
    verbose(`--set specifies the set id use when feching. If not specified, a random set id is used\n`);
    verbose(`--delay specifies whether to wait the length of each track after the track is
        fetched as if it was "playing". For longer playlists, 8tracks can't handle fetching all
        songs at once, so this is a way around that. Unfortunately, this means that fetching a
        playlist with this flag takes as long as it takes for the playlist to play to its end :(\n`);
    verbose(`--output (or -o) specifies where to put the output. If a filepath, put data in that file. If empty, write to stdout.\n\n`);
    verbose(`Error: please specify a mix id to fetch with --mix (it's a required argument)\n`);
    process.exit(1);
  }

  // convert mix url to mix id?
  let promise;
  if (isNaN(parseInt(mix))) {
    promise = convertMixUrlToMixId(mix).then(data => {
      // Log playlist info block
      logBlock({
        name: data.name,
        description: data.desc.toString('base64'),
        link: data.link,
        image: data.image,
        tags: data.tags.join(','),
      }, 'playlist');
      verbose(`* Write playlist info block...\n`);

      mix = data.id;
    });
  } else {
    promise = Promise.resolve();
  }

  promise.then(() => {
    verbose(`* Get all tracks in mix ${chalk.green(mix)}... \n`);
    return getTracksInMix(mix, set, {delayLengthOfTrack: delay})
  }).then(({emitter, complete}) => {
    emitter.on('track', t => {
      verbose(`* Found track ${chalk.cyan(t.name)} in mix ${chalk.green(mix)}...\n`);
      return logBlock(t, 'track');
    });
    return complete;
  }).catch(err => {
    if (err.statusCode) {
      console.error(err.name, err.statusCode, err.response.body);
    } else {
      console.error(err);
    }
  });
}
